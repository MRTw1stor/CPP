/* Составить программу записи в файл GS всех чисел файла FS кратных 5, 
а файл HS – всех отрицательных чисел кратных 3.*/

#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

struct FileData
{
    vector<int> data;
};

void createNewFile(const string& filename)
{
    cout << "Создание нового файла " << filename << endl;
    ofstream file(filename);  // Создание нового файла
    file.close();  // Закрытие файла
}

void viewFile(const string& filename)
{
    cout << "Просмотр содержимого файла " << filename << endl;
    ifstream file(filename);  // Открытие файла для чтения
    file.close();  // Закрытие файла
}

void correctFile(const string& filename)
{
    cout << "Коррекция файла " << filename << endl;
    ofstream file(filename, ios::app);  // Открытие файла для дозаписи новых данных или исправления старых
    file.close();  // Закрытие файла
}

void writeDataToFile(const string& filename, const FileData& fileData)
{
    ofstream file(filename);  // Открытие файла для записи
    if (file.is_open()) {
        for (int val : fileData.data) {
            file << val << " ";  // Запись данных в файл
        }
        file.close();  // Закрытие файла
        cout << "Данные успешно записаны в файл " << filename << endl;
    } else {
        cout << "Ошибка при открытии файла " << filename << " для записи данных" << endl;
    }
}

int main() {
    setlocale(LC_ALL, "ru");  // Установка локали для вывода на русском языке
    const string fsFilename = "FS.txt";
    const string hsFilename = "HS.txt";

    // Создание структуры для данных, которые будут записаны в файл
    FileData fsData;
    FileData hsData;

    // Наполнение структуры данными, кратными 5 и отрицательными числами кратными 3
    for (int i = -50; i <= 50; ++i) {
        if (i % 5 == 0) {
            fsData.data.push_back(i);
        }
        if (i % 3 == 0 && i < 0) {
            hsData.data.push_back(i);
        }
    }

    // Запись данных в соответствующие файлы
    writeDataToFile(fsFilename, fsData);
    writeDataToFile(hsFilename, hsData);

    // Пример использования создания нового файла, просмотра и коррекции
    createNewFile("example.txt");  // Пример создания нового файла
    viewFile("example.txt");  // Пример просмотра содержимого файла
    correctFile("example.txt");  // Пример коррекции файла
}

/* №1
Физический файл - это абстрактный набор данных, 
хранящийся на диске или другом постоянном носителе. 
Физический файл представляет собой непрерывную последовательность байтов, 
которая хранится на диске. Логический файл - это абстрактный набор данных, 
который представляется операционной системой как последовательность данных, 
доступных для программы ввода/вывода. Логический файл может быть 
ассоциирован с физическим файлом, но может также представлять данные, 
которые могут быть произведены программно, например, 
через сетевое соединение или другие источники данных.
*/

/* №2
В языке программирования C открытие файла осуществляется с помощью функции fopen(). 
Эта функция принимает два параметра: имя файла и режим открытия файла. 
Режимы открытия могут быть "r" (открытие файла для чтения), 
"w" (открытие файла для записи, если файл уже существует, 
его содержимое удаляется, если файла нет, то создается новый), 
"a" (открытие файла для записи в конец файла, если файл не существует, создается новый), 
"r+" (открытие файла для чтения и записи), 
"w+" (открытие файла для чтения и записи, файл усекается до нулевой длины, 
если файл не существует, он создается), 
"a+" (открытие файла для чтения и записи в конец файла, если файла не существует, создается новый). 

Например:
FILE *file = fopen("example.txt", "r");
if (file == NULL) {
    printf("Ошибка открытия файла");
} else {
    // Работа с файлом
}
*/

/* №3
Порядок работы с файлами в C может быть представлен следующим образом:

Открытие файла с помощью функции fopen().

Чтение, запись или обработка данных в файле с помощью функций fread(), 
fwrite(), fprintf(), fscanf() и других функций в зависимости от требований.

Закрытие файла с помощью функции fclose(), чтобы освободить ресурсы и сбросить буферы.

Пример:
FILE *file = fopen("example.txt", "w");
if (file == NULL) {
    printf("Ошибка открытия файла");
} else {
    // Запись данных в файл
    fprintf(file, "Hello, World!");
    fclose(file); // Закрытие файла
}
*/